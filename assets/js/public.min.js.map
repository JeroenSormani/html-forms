{"version":3,"sources":["public.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","require","undefined","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","getButtonText","button","innerHTML","value","setButtonText","text","Loader","formElement","this","form","querySelector","loadingInterval","character","originalButton","cloneNode","setCharacter","c","start","loadingText","getAttribute","styles","window","getComputedStyle","style","width","setInterval","tick","bind","opacity","loadingChar","stop","clearInterval","2","cleanFormMessages","querySelectorAll","forEach","el","parentNode","removeChild","addFormMessage","message","txtElement","document","createElement","className","type","insertBefore","firstElementChild","serialize","vars","hf_js_vars","ajax_url","location","href","addEventListener","target","indexOf","preventDefault","loader","data","request","XMLHttpRequest","onreadystatechange","response","readyState","status","JSON","parse","responseText","error","console","log","hide_form","display","redirect_url","open","setRequestHeader","send","./form-loading-indicator.js","form-serialize","3","options","hash","result","serializer","hash_serializer","str_serialize","elements","radio_store","Object","create","element","disabled","name","k_r_success_contrls","test","nodeName","k_r_submitter","key","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice","parse_keys","string","keys","prefix","children","RegExp","brackets","match","exec","push","hash_assign","shift","between","Array","isArray","_values","index","isNaN","existing","replace","encodeURIComponent"],"mappings":"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","file":"public.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n    var require = undefined;var module = undefined;var exports = undefined;var define = undefined;(function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            }return n[o].exports;\n        }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {\n            s(r[o]);\n        }return s;\n    })({ 1: [function (require, module, exports) {\n            'use strict';\n\n            function getButtonText(button) {\n                return button.innerHTML ? button.innerHTML : button.value;\n            }\n\n            function setButtonText(button, text) {\n                button.innerHTML ? button.innerHTML = text : button.value = text;\n            }\n\n            function Loader(formElement) {\n                this.form = formElement;\n                this.button = formElement.querySelector('input[type=\"submit\"], button[type=\"submit\"]');\n                this.loadingInterval = 0;\n                this.character = \"\\xB7\";\n\n                if (this.button) {\n                    this.originalButton = this.button.cloneNode(true);\n                }\n            }\n\n            Loader.prototype.setCharacter = function (c) {\n                this.character = c;\n            };\n\n            Loader.prototype.start = function () {\n                if (this.button) {\n                    // loading text\n                    var loadingText = this.button.getAttribute('data-loading-text');\n                    if (loadingText) {\n                        setButtonText(this.button, loadingText);\n                        return;\n                    }\n\n                    // Show AJAX loader\n                    var styles = window.getComputedStyle(this.button);\n                    this.button.style.width = styles.width;\n                    setButtonText(this.button, this.character);\n                    this.loadingInterval = window.setInterval(this.tick.bind(this), 500);\n                } else {\n                    this.form.style.opacity = '0.5';\n                }\n            };\n\n            Loader.prototype.tick = function () {\n                // count chars, start over at 5\n                var text = getButtonText(this.button);\n                var loadingChar = this.character;\n                setButtonText(this.button, text.length >= 5 ? loadingChar : text + \" \" + loadingChar);\n            };\n\n            Loader.prototype.stop = function () {\n                if (this.button) {\n                    this.button.style.width = this.originalButton.style.width;\n                    var text = getButtonText(this.originalButton);\n                    setButtonText(this.button, text);\n                    window.clearInterval(this.loadingInterval);\n                } else {\n                    this.form.style.opacity = '';\n                }\n            };\n\n            module.exports = Loader;\n        }, {}], 2: [function (require, module, exports) {\n            \"use strict\";\n\n            var serialize = require('form-serialize');\n            var Loader = require('./form-loading-indicator.js');\n            var vars = window.hf_js_vars || { ajax_url: window.location.href };\n\n            function cleanFormMessages(formElement) {\n                var messageElements = formElement.querySelectorAll('.hf-message');\n                messageElements.forEach(function (el) {\n                    el.parentNode.removeChild(el);\n                });\n            }\n\n            function addFormMessage(formElement, message) {\n                var txtElement = document.createElement('p');\n                txtElement.className = 'hf-message hf-message-' + message.type;\n                txtElement.innerHTML = message.text;\n                formElement.insertBefore(txtElement, formElement.firstElementChild);\n            }\n\n            document.addEventListener('submit', function (e) {\n                var formElement = e.target;\n                if (formElement.className.indexOf('hf-form') < 0) {\n                    return;\n                }\n\n                e.preventDefault();\n                var loader = new Loader(formElement);\n                var data = serialize(formElement);\n                var request = new XMLHttpRequest();\n\n                cleanFormMessages(formElement);\n                loader.start();\n                request.onreadystatechange = function () {\n                    var response = void 0;\n\n                    // are we done?\n                    if (this.readyState === 4) {\n                        loader.stop();\n\n                        if (this.status >= 200 && this.status < 400) {\n                            try {\n                                response = JSON.parse(this.responseText);\n                            } catch (error) {\n                                console.log('HTML Forms: failed to parse AJAX response.\\n\\nError: \"' + error + '\"');\n\n                                return;\n                            }\n\n                            // Show form message\n                            if (response.message) {\n                                addFormMessage(formElement, response.message);\n                            }\n\n                            if (response.hide_form) {\n                                formElement.querySelector('.hf-fields-wrap').style.display = 'none';\n                            }\n\n                            // Should we redirect?\n                            if (response.redirect_url) {\n                                window.location = response.redirect_url;\n                            }\n                        } else {\n                            // Server error :(\n                            console.log(this.responseText);\n                        }\n                    }\n                };\n\n                request.open('POST', vars.ajax_url, true);\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                request.send(data);\n                request = null;\n            }, true);\n        }, { \"./form-loading-indicator.js\": 1, \"form-serialize\": 3 }], 3: [function (require, module, exports) {\n            // get successful control from form and assemble into object\n            // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n            // types which indicate a submit action and are not successful controls\n            // these will be ignored\n            var k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n            // node names which could be successful controls\n            var k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n            // Matches bracket notation.\n            var brackets = /(\\[[^\\[\\]]*\\])/g;\n\n            // serializes form fields\n            // @param form MUST be an HTMLForm element\n            // @param options is an optional argument to configure the serialization. Default output\n            // with no options specified is a url encoded string\n            //    - hash: [true | false] Configure the output type. If true, the output will\n            //    be a js object.\n            //    - serializer: [function] Optional serializer function to override the default one.\n            //    The function takes 3 arguments (result, key, value) and should return new result\n            //    hash and url encoded str serializers are provided with this module\n            //    - disabled: [true | false]. If true serialize disabled fields.\n            //    - empty: [true | false]. If true serialize empty fields\n            function serialize(form, options) {\n                if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) != 'object') {\n                    options = { hash: !!options };\n                } else if (options.hash === undefined) {\n                    options.hash = true;\n                }\n\n                var result = options.hash ? {} : '';\n                var serializer = options.serializer || (options.hash ? hash_serializer : str_serialize);\n\n                var elements = form && form.elements ? form.elements : [];\n\n                //Object store each radio and set if it's empty or not\n                var radio_store = Object.create(null);\n\n                for (var i = 0; i < elements.length; ++i) {\n                    var element = elements[i];\n\n                    // ingore disabled fields\n                    if (!options.disabled && element.disabled || !element.name) {\n                        continue;\n                    }\n                    // ignore anyhting that is not considered a success field\n                    if (!k_r_success_contrls.test(element.nodeName) || k_r_submitter.test(element.type)) {\n                        continue;\n                    }\n\n                    var key = element.name;\n                    var val = element.value;\n\n                    // we can't just use element.value for checkboxes cause some browsers lie to us\n                    // they say \"on\" for value when the box isn't checked\n                    if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n                        val = undefined;\n                    }\n\n                    // If we want empty elements\n                    if (options.empty) {\n                        // for checkbox\n                        if (element.type === 'checkbox' && !element.checked) {\n                            val = '';\n                        }\n\n                        // for radio\n                        if (element.type === 'radio') {\n                            if (!radio_store[element.name] && !element.checked) {\n                                radio_store[element.name] = false;\n                            } else if (element.checked) {\n                                radio_store[element.name] = true;\n                            }\n                        }\n\n                        // if options empty is true, continue only if its radio\n                        if (val == undefined && element.type == 'radio') {\n                            continue;\n                        }\n                    } else {\n                        // value-less fields are ignored unless options.empty is true\n                        if (!val) {\n                            continue;\n                        }\n                    }\n\n                    // multi select boxes\n                    if (element.type === 'select-multiple') {\n                        val = [];\n\n                        var selectOptions = element.options;\n                        var isSelectedOptions = false;\n                        for (var j = 0; j < selectOptions.length; ++j) {\n                            var option = selectOptions[j];\n                            var allowedEmpty = options.empty && !option.value;\n                            var hasValue = option.value || allowedEmpty;\n                            if (option.selected && hasValue) {\n                                isSelectedOptions = true;\n\n                                // If using a hash serializer be sure to add the\n                                // correct notation for an array in the multi-select\n                                // context. Here the name attribute on the select element\n                                // might be missing the trailing bracket pair. Both names\n                                // \"foo\" and \"foo[]\" should be arrays.\n                                if (options.hash && key.slice(key.length - 2) !== '[]') {\n                                    result = serializer(result, key + '[]', option.value);\n                                } else {\n                                    result = serializer(result, key, option.value);\n                                }\n                            }\n                        }\n\n                        // Serialize if no selected options and options.empty is true\n                        if (!isSelectedOptions && options.empty) {\n                            result = serializer(result, key, '');\n                        }\n\n                        continue;\n                    }\n\n                    result = serializer(result, key, val);\n                }\n\n                // Check for all empty radio buttons and serialize them with key=\"\"\n                if (options.empty) {\n                    for (var key in radio_store) {\n                        if (!radio_store[key]) {\n                            result = serializer(result, key, '');\n                        }\n                    }\n                }\n\n                return result;\n            }\n\n            function parse_keys(string) {\n                var keys = [];\n                var prefix = /^([^\\[\\]]*)/;\n                var children = new RegExp(brackets);\n                var match = prefix.exec(string);\n\n                if (match[1]) {\n                    keys.push(match[1]);\n                }\n\n                while ((match = children.exec(string)) !== null) {\n                    keys.push(match[1]);\n                }\n\n                return keys;\n            }\n\n            function hash_assign(result, keys, value) {\n                if (keys.length === 0) {\n                    result = value;\n                    return result;\n                }\n\n                var key = keys.shift();\n                var between = key.match(/^\\[(.+?)\\]$/);\n\n                if (key === '[]') {\n                    result = result || [];\n\n                    if (Array.isArray(result)) {\n                        result.push(hash_assign(null, keys, value));\n                    } else {\n                        // This might be the result of bad name attributes like \"[][foo]\",\n                        // in this case the original `result` object will already be\n                        // assigned to an object literal. Rather than coerce the object to\n                        // an array, or cause an exception the attribute \"_values\" is\n                        // assigned as an array.\n                        result._values = result._values || [];\n                        result._values.push(hash_assign(null, keys, value));\n                    }\n\n                    return result;\n                }\n\n                // Key is an attribute name and can be assigned directly.\n                if (!between) {\n                    result[key] = hash_assign(result[key], keys, value);\n                } else {\n                    var string = between[1];\n                    // +var converts the variable into a number\n                    // better than parseInt because it doesn't truncate away trailing\n                    // letters and actually fails if whole thing is not a number\n                    var index = +string;\n\n                    // If the characters between the brackets is not a number it is an\n                    // attribute name and can be assigned directly.\n                    if (isNaN(index)) {\n                        result = result || {};\n                        result[string] = hash_assign(result[string], keys, value);\n                    } else {\n                        result = result || [];\n                        result[index] = hash_assign(result[index], keys, value);\n                    }\n                }\n\n                return result;\n            }\n\n            // Object/hash encoding serializer.\n            function hash_serializer(result, key, value) {\n                var matches = key.match(brackets);\n\n                // Has brackets? Use the recursive assignment function to walk the keys,\n                // construct any missing objects in the result tree and make the assignment\n                // at the end of the chain.\n                if (matches) {\n                    var keys = parse_keys(key);\n                    hash_assign(result, keys, value);\n                } else {\n                    // Non bracket notation can make assignments directly.\n                    var existing = result[key];\n\n                    // If the value has been assigned already (for instance when a radio and\n                    // a checkbox have the same name attribute) convert the previous value\n                    // into an array before pushing into it.\n                    //\n                    // NOTE: If this requirement were removed all hash creation and\n                    // assignment could go through `hash_assign`.\n                    if (existing) {\n                        if (!Array.isArray(existing)) {\n                            result[key] = [existing];\n                        }\n\n                        result[key].push(value);\n                    } else {\n                        result[key] = value;\n                    }\n                }\n\n                return result;\n            }\n\n            // urlform encoding serializer\n            function str_serialize(result, key, value) {\n                // encode newlines as \\r\\n cause the html spec says so\n                value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n                value = encodeURIComponent(value);\n\n                // spaces should be '+' rather than '%20'.\n                value = value.replace(/%20/g, '+');\n                return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n            }\n\n            module.exports = serialize;\n        }, {}] }, {}, [2]);\n    ;\n})();"]}